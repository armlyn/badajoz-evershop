scalar JSON

extend type Cart {
  applyRewardApi: String!
}


"""
Represents a reward
"""
type Reward {
  rewardId: Int!
  uuid: String!
  sellerUserId: Int
  name: String!
  description: String
  pointsRequired: Int!
  status: Boolean!
  startDate: DateTime
  endDate: DateTime
  editUrl: String!
  updateApi: String!
  deleteApi: String!
  userCondition: UserCondition

}
"""
The `FilterInput` type represents a filter input object. Operations must be one of the following: eq, neq, gt, gteq, lt, lteq, like, nlike, in, nin.
"""
enum FilterOperation {
  eq
  neq
  gt
  gteq
  lt
  lteq
  like
  nlike
  in
  nin
}

input FilterInput {
  key: String!
  operation: FilterOperation!
  value: String
}
"""
The `Filter` type represents a filter object.
"""
type Filter {
  key: String!
  operation: String!
  value: String!
}

"""
Represents the user condition of a reward.
"""
type UserCondition {
  groups: [String]
  emails: String
  purchased: String
}


"""
Returns a collection of rewards
"""
type RewardCollection {
  items: [Reward]
  currentPage: Int!
  total: Int!
  currentFilters: [Filter]
}

extend type Query {
  reward(id: Int): Reward
  rewards(filters: [FilterInput]): RewardCollection
}
